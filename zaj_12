using System.Security.Cryptography.X509Certificates;
using static ISIgr1_5.DrzewoBinarne;

namespace ISIgr1_5
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }

        private void button1_Click(object sender, EventArgs e)
        {
            /*
            var w1 = new Wezel(5);
            var w2 = new Wezel(3);
            var w3 = new Wezel(1);
            var w4 = new Wezel(2);
            var w5 = new Wezel(6);
            var w6 = new Wezel(4);
            w1.dzieci.Add(w2);
            w1.dzieci.Add(w3);
            w1.dzieci.Add(w4);
            w2.dzieci.Add(w5);
            w2.dzieci.Add(w6);

            A(w1);
            */
            /*
            var d = new DrzewoBinarne(5);
            d.Add(4);
            d.Add(8);
            d.Add(3);
            d.Add(7);
            d.Add(9);
            d.Add(6);
            */

            Wezel4 w = new Wezel4(1);
            Element test = new Element(0, w, true);

            test.al();




        }

        void A(Wezel w)
        {
            MessageBox.Show(w.wartosc.ToString());
            //A(w);

            for (int i = 0; i < w.dzieci.Count; i++)
            {
                A(w.dzieci[i]);
            }
        }
        void A(Wezel2 w)
        {
            MessageBox.Show(w.wartosc.ToString());
            //A(w);

            for (int i = 0; i < w.sasiedzi.Count; i++)
            {
                A(w.sasiedzi[i]);
            }
        }




    }

    class Wezel
    {
        public int wartosc;
        public List<Wezel> dzieci = new List<Wezel>();

        public Wezel(int liczba)
        {
            this.wartosc = liczba;
        }
    }

    class Wezel2
    {
        public int wartosc;
        public List<Wezel2> sasiedzi = new List<Wezel2>();

        public Wezel2(int liczba)
        {
            this.wartosc = liczba;

        }

        public void Add(Wezel2 s)
        {

            if (this == s)
            {
                return;
            }

            if (!this.sasiedzi.Contains(s))
            {
                this.sasiedzi.Add(s);

            }
            if (!s.sasiedzi.Contains(this))
            {
                s.sasiedzi.Add(this);

            }


        }

        public override string ToString()
        {
            return this.wartosc.ToString();
        }
    }

    public class Wêzel3
    {
        public int wartosc;
        public Wêzel3 prawe;
        public Wêzel3 lewe;
        public Wêzel3 rodzic;

        public Wêzel3(int liczba)
        {
            this.wartosc = liczba;
        }



        internal void Add(int liczba)
        {
            var dziecko = new Wêzel3(liczba);
            dziecko.rodzic = this;
            if (liczba < this.wartosc)
            {
                this.lewe = dziecko;
            }
            else
            {
                this.prawe = dziecko;
            }
        }



    }


    public class DrzewoBinarne
    {
        public Wêzel3 korzeñ;
        public int liczbaWêzlów;

        public DrzewoBinarne(int liczba)
        {
            this.korzeñ = new Wêzel3(liczba);
            this.liczbaWêzlów = 1;
        }

        public void Add(int liczba)
        {
            Wêzel3 rodzic = this.ZnajdzRodzica(liczba);
            rodzic.Add(liczba);


        }



        public Wêzel3 Znajdź(int liczba)
        {
            var w = this.korzeñ;
            while (w != null)
            {
                if (liczba == w.wartosc)
                {
                    return w;
                }
                else if (liczba < w.wartosc)
                {
                    if (w.lewe == null)
                    {
                        return null;
                    }
                    else
                    {
                        w = w.lewe;
                    }
                }
                else
                {

                    if (w.prawe == null)
                    {
                        return null;
                    }
                    else
                    {
                        w = w.prawe;
                    }

                }
            }
            return null;
        }

        private Wêzel3 ZnajdzRodzica(int liczba)
        {
            var w = this.korzeñ;
            while (w != null)
            {
                if (liczba < w.wartosc)
                {
                    if (w.lewe == null)
                    {
                        return w;
                    }
                    else
                    {
                        w = w.lewe;
                    }
                }
                else
                {

                    if (w.prawe == null)
                    {
                        return w;
                    }
                    else
                    {
                        w = w.prawe;
                    }

                }
            }
            return null;
        }


        public Wêzel3 Min(Wêzel3 w)
        {
            while (w.lewe != null)
            {
                w = w.lewe;
            }
            return w;
        }

        public Wêzel3 Max(Wêzel3 w)
        {
            while (w.prawe != null)
            {
                w = w.prawe;
            }
            return w;
        }




        public Wêzel3 Następny(Wêzel3 w)
        {
            if (w.prawe != null)
            {

                return this.Min(w.prawe);
            }



            while (w.rodzic != null)
            {
                if (w.rodzic.lewe == w)
                {
                    return w.rodzic;
                }
                w = w.rodzic;
            }


            return null;
        }





        // PD 
        //Usuń
        //1 Gdy nie ma dzieci, odwiązujemy
        //2 Gdy jest 1 dziecko to wchodzi na miejsce rodzica
        //3 Gdy jest 2 dzieci 














        //L           T
        //4:6:1     4-6:1
        //4:5:2     4-5:2
        //2:1:3     2-1:3
        //0:6:3     0-6:3
        //2:4:4     2-4:4
        //0:1:5     0-1:5
        //2:6:5     -
        //1:5:6     -
        //5:6:6     -
        //1:7:7     -
        //1:4:8     -
        //3:6:8     3-6:8
        //0:3:9     -
        //1:2:9     -
        //2:3:9     -
        //6:7:9     -



        


        

        







    }


    public class Wezel4
    {
        int wartosc;
        public Wezel4(int wartosc)
        {
            this.wartosc = wartosc;
        }
        public override string ToString()
        {
            return this.wartosc.ToString();
        }
    }

    public class Element
    {
        int d;
        Wezel4 p;
        bool czyZrobione;

        public Element(int d, Wezel4 p, bool czyZrobione)
        {
            this.d = d;
            this.p = p;
            this.czyZrobione = czyZrobione;
        }

        public void al()
        {
            Dictionary<Wezel4, Element> tablica = new Dictionary<Wezel4, Element>();
            tablica.Add(new Wezel4(0), new Element(0, new Wezel4(1),true));
            tablica.Add(new Wezel4(1), new Element(3, new Wezel4(0), true));
            tablica.Add(new Wezel4(2), new Element(4, new Wezel4(1), false));
            tablica.Add(new Wezel4(3), new Element(99, new Wezel4(-1), false));
            tablica.Add(new Wezel4(4), new Element(3, new Wezel4(0), false));
            tablica.Add(new Wezel4(5), new Element(99, new Wezel4(1), false));
            var w = tablica.Where(item => item.Value.czyZrobione).Min(item => item.Value.d);
            
        }


    }


}
